import numpy as np

####################################################################
## numpy 기본 ##
## numpy배열을 만들 때는, np.array() 사용 ##
x = np.array([1.0, 2.0, 3.0])
print("x = ", x)
## numpy.ndarray를 반환 ##
print("x type = ", type(x))
####################################################################
## numpy 산술 연산 ##
## 연산하고자 하는 배열들의 원소가 동일해야함 ##
x = np.array([1.0, 2.0, 3.0])
y = np.array([2.0, 4.0, 6.0])
print("x+y = ", x+y)
print("x-y = ", x-y)
print("x*y = ", x*y)
print("x/y = ", x/y)
## 수치 하나(스칼라값)의 연산 수행 가능 == 브로드캐스트
print("x/2.0 = ", x/2.0)
####################################################################
## numpy N차원 배열 ##
A = np.array([[1, 2], [3, 4]])
print("A = ", A)
print("A shape = ", A.shape)
print("A type = ", A.dtype)

B = np.array([[3.0, 0.0], [0.0, 6.0]])
print("A+B = ", A+B)
print("A*B = ", A*B)
print("A*10 = ", A*10)
####################################################################
## 브로드캐스트 ##
## 차원이 다를 경우, 차원에 맞게 확대 후 연산이 이루어짐 ##
A = np.array([[1, 2], [3, 4]])
B = np.array([10, 20])
print("A*B = ", A*B)
####################################################################
## 원소 접근 ##
X = np.array([[51, 55],[14, 19], [0, 4]])
print("X[0] = ", X[0])
print("X[0][1] = ", X[0][1])

## for문으로도 접근 가능 ##
print("for문으로 출력 = ")
for row in X:
    print(row)

## 인덱스를 배열로 지정해 한 번에 여러 원소 접근 가능 ##
X = X.flatten()
print("X flatten = ", X)

## 특정 값의 원소 얻기 ##
print("0,2,4번 째 인덱스 = ", X[np.array([0, 2, 4])])

## 조건에 맞는 특정 값의 원소 찾기 ##
print("X>15 = ", X>15)
print("X>15인 인덱스 = ", X[X>15])
####################################################################
